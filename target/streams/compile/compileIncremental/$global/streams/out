[0m[[0m[0mdebug[0m] [0m[0mInvalidating \home\bob\.ivy2\cache\org.scala-js\scalajs-dom_sjs0.6_2.12\jars\scalajs-dom_sjs0.6_2.12-0.9.2.jar: class org.scalajs.dom.raw.KeyboardEvent now provided by C:\Users\Flori\.ivy2\cache\org.scala-js\scalajs-dom_sjs0.6_2.12\jars\scalajs-dom_sjs0.6_2.12-0.9.2.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating \home\bob\.ivy2\cache\org.scala-js\scalajs-library_2.12\jars\scalajs-library_2.12-0.6.25.jar: class scala.scalajs.js.Dictionary now provided by C:\Users\Flori\.ivy2\cache\org.scala-js\scalajs-library_2.12\jars\scalajs-library_2.12-0.6.25.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating \home\bob\.sbt\boot\scala-2.12.4\lib\scala-library.jar: class scala.Tuple4 now provided by C:\Users\Flori\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.12.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating \usr\lib\jvm\java-8-graal\jre\lib\rt.jar: could not find class java.lang.Object on the classpath.[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(D:\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\Runner.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\Viw.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\Runner.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\State.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(E:\Documents\Studies\CPL\CPL_project\src\main\scala\viw\internals\Runner.scala, E:\Documents\Studies\CPL\CPL_project\src\main\scala\viw\internals\State.scala, E:\Documents\Studies\CPL\CPL_project\src\main\scala\viw\Viw.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(\home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\Runner$.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\Runner.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\State.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\Viw.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\State$.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\StateFields.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\State$Position$.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\State$$anonfun$1.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\Viw$.class, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\target\scala-2.12\classes\viw\internals\State$Position.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set(\home\bob\.ivy2\cache\org.scala-js\scalajs-dom_sjs0.6_2.12\jars\scalajs-dom_sjs0.6_2.12-0.9.2.jar, \home\bob\.ivy2\cache\org.scala-js\scalajs-library_2.12\jars\scalajs-library_2.12-0.6.25.jar, \home\bob\.sbt\boot\scala-2.12.4\lib\scala-library.jar, \usr\lib\jvm\java-8-graal\jre\lib\rt.jar)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(viw.internals.Runner, viw.internals.StateFields, viw.internals.State, viw.internals.State.Position, viw.Viw)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(\home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\Runner.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\Viw.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\State.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set(\home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\Runner.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\State.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\Viw.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(viw.internals.Runner, viw.internals.StateFields, viw.internals.State, viw.internals.State.Position, viw.Viw)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(E:\Documents\Studies\CPL\CPL_project\src\main\scala\viw\internals\State.scala, E:\Documents\Studies\CPL\CPL_project\src\main\scala\viw\internals\Runner.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\Runner.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\Viw.scala, E:\Documents\Studies\CPL\CPL_project\src\main\scala\viw\Viw.scala, \home\bob\Dropbox\CPL\Scala\2018\project\project-template\src\main\scala\viw\internals\State.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 3 sources: invalidated sources (6) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 3 Scala sources to E:\Documents\Studies\CPL\CPL_project\target\scala-2.12\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 350b12f5 for Scala compiler version 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-encoding[0m
[0m[[0m[0mdebug[0m] [0m[0m	UTF-8[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-deprecation[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xlint[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Yno-adapted-args[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Ywarn-dead-code[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Ywarn-numeric-widen[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Ywarn-value-discard[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xfuture[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Ypartial-unification[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xplugin:C:\Users\Flori\.ivy2\cache\org.scala-js\scalajs-compiler_2.12.4\jars\scalajs-compiler_2.12.4-0.6.25.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\Flori\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.12.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	E:\Documents\Studies\CPL\CPL_project\target\scala-2.12\classes;C:\Users\Flori\.ivy2\cache\org.scala-js\scalajs-library_2.12\jars\scalajs-library_2.12-0.6.25.jar;C:\Users\Flori\.ivy2\cache\org.scala-js\scalajs-dom_sjs0.6_2.12\jars\scalajs-dom_sjs0.6_2.12-0.9.2.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 7.5509646 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.internals.Runner...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.internals.Runner)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.internals.Runner)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.internals.Runner,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]))) invalidates 1 classes due to The viw.internals.Runner has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.internals.Runner)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.NextWordCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.NextWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.NextWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.NextWordCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(viw;NextWordCommand;init;,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(NextWordCommand,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.NextWordCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(viw;NextWordCommand;init;,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(NextWordCommand,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.NextWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.Command...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.Command)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.SubstituteCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.JoinLineCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.ChangeLineCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.InsertCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.GoCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.DeleteLineCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.OpenCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.InsertAfterLineCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveLeftCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveWordCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.EndWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.BackWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.NextWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveUpCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.StartLineCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.EndLineCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MatchBracketCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveRightCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveDownCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.DeleteCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.DeleteBackCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.AppendCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.InsertInLineCommand by viw.Command[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.SubstituteCommand, viw.Command, viw.JoinLineCommand, viw.ChangeLineCommand, viw.BackWordCommand, viw.InsertCommand, viw.GoCommand, viw.DeleteLineCommand, viw.MoveLeftCommand, viw.MoveWordCommand, viw.MoveUpCommand, viw.StartLineCommand, viw.OpenCommand, viw.EndLineCommand, viw.InsertAfterLineCommand, viw.EndWordCommand, viw.MatchBracketCommand, viw.MoveCommand, viw.MoveRightCommand, viw.DeleteCommand, viw.DeleteBackCommand, viw.AppendCommand, viw.InsertInLineCommand, viw.NextWordCommand, viw.MoveDownCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.Command,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Command,[Default]), UsedName($isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(viw;Command;init;,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]))) invalidates 25 classes due to The viw.Command has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Command,[Default]), UsedName($isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(viw;Command;init;,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.SubstituteCommand, viw.Command, viw.JoinLineCommand, viw.ChangeLineCommand, viw.BackWordCommand, viw.InsertCommand, viw.GoCommand, viw.DeleteLineCommand, viw.MoveLeftCommand, viw.MoveWordCommand, viw.MoveUpCommand, viw.StartLineCommand, viw.OpenCommand, viw.EndLineCommand, viw.InsertAfterLineCommand, viw.EndWordCommand, viw.MatchBracketCommand, viw.MoveCommand, viw.MoveRightCommand, viw.DeleteCommand, viw.DeleteBackCommand, viw.AppendCommand, viw.InsertInLineCommand, viw.NextWordCommand, viw.MoveDownCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.GoCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.GoCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.GoCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.GoCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GoCommand,[Default]), UsedName(viw;GoCommand;init;,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.GoCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GoCommand,[Default]), UsedName(viw;GoCommand;init;,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.GoCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.MoveUpCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.MoveUpCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.MoveUpCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.MoveUpCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(viw;MoveUpCommand;init;,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(MoveUpCommand,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.MoveUpCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(viw;MoveUpCommand;init;,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(MoveUpCommand,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.MoveUpCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.InsertInLineCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.InsertInLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.InsertInLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.InsertInLineCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(viw;InsertInLineCommand;init;,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(InsertInLineCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.InsertInLineCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(viw;InsertInLineCommand;init;,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(InsertInLineCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.InsertInLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.MoveLeftCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.MoveLeftCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.MoveLeftCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.MoveLeftCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(MoveLeftCommand,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(viw;MoveLeftCommand;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.MoveLeftCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(MoveLeftCommand,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(viw;MoveLeftCommand;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.MoveLeftCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.internals.State.Position...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.internals.State.Position)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.internals.State.Position)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.SubstituteCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.Command. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.ChangeLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.GoCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveLeftCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveUpCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.StartLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.OpenCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.EndLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertAfterLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.internals.Runner. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveRightCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.AppendCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertInLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveDownCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.Viw. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.internals.State.Position,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]))) invalidates 1 classes due to The viw.internals.State.Position has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.internals.State.Position)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.internals.StateFields...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.internals.StateFields)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.internals.State by viw.internals.StateFields[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.internals.StateFields, viw.internals.State)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.SubstituteCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.Command. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.JoinLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.ChangeLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.BackWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.GoCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.DeleteLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveLeftCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveUpCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.StartLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.OpenCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.EndLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertAfterLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.EndWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MatchBracketCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.internals.Runner. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveRightCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.DeleteCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.DeleteBackCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.AppendCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertInLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.NextWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveDownCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.Viw. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.internals.StateFields,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]))) invalidates 2 classes due to The viw.internals.StateFields has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.internals.StateFields, viw.internals.State)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.DeleteBackCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.DeleteBackCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.DeleteBackCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.DeleteBackCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(viw;DeleteBackCommand;init;,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(DeleteBackCommand,[Default]))) invalidates 1 classes due to The viw.DeleteBackCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(viw;DeleteBackCommand;init;,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(DeleteBackCommand,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.DeleteBackCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.JoinLineCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.JoinLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.JoinLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.JoinLineCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(viw;JoinLineCommand;init;,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(JoinLineCommand,[Default]))) invalidates 1 classes due to The viw.JoinLineCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(viw;JoinLineCommand;init;,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(JoinLineCommand,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.JoinLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.DeleteLineCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.DeleteLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.DeleteLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.DeleteLineCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(viw;DeleteLineCommand;init;,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(DeleteLineCommand,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.DeleteLineCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(viw;DeleteLineCommand;init;,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(DeleteLineCommand,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.DeleteLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.MoveDownCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.MoveDownCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.MoveDownCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.MoveDownCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(MoveDownCommand,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(viw;MoveDownCommand;init;,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.MoveDownCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(MoveDownCommand,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(viw;MoveDownCommand;init;,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.MoveDownCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.EndLineCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.EndLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.EndLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.EndLineCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(EndLineCommand,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(viw;EndLineCommand;init;,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.EndLineCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(EndLineCommand,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(viw;EndLineCommand;init;,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.EndLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.InsertCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.InsertCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.InsertCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.InsertCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(InsertCommand,[Default]), UsedName(toString,[Default]), UsedName(viw;InsertCommand;init;,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.InsertCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(InsertCommand,[Default]), UsedName(toString,[Default]), UsedName(viw;InsertCommand;init;,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.InsertCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.EndWordCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.EndWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.EndWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.EndWordCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(viw;EndWordCommand;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(EndWordCommand,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.EndWordCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(viw;EndWordCommand;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(EndWordCommand,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.EndWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.SubstituteCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.SubstituteCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.SubstituteCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.SubstituteCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName(SubstituteCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(viw;SubstituteCommand;init;,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.SubstituteCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName(SubstituteCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(viw;SubstituteCommand;init;,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.SubstituteCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.DeleteCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.DeleteCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.DeleteCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.DeleteCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(viw;DeleteCommand;init;,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(DeleteCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.DeleteCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(viw;DeleteCommand;init;,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(DeleteCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.DeleteCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.OpenCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.OpenCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.OpenCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.OpenCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(OpenCommand,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(viw;OpenCommand;init;,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.OpenCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(OpenCommand,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(viw;OpenCommand;init;,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.OpenCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.ChangeLineCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.ChangeLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.ChangeLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.ChangeLineCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(viw;ChangeLineCommand;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(ChangeLineCommand,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.ChangeLineCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(viw;ChangeLineCommand;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(ChangeLineCommand,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.ChangeLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.Viw...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.Viw)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.Viw)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.internals.Runner. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.Viw,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(commandMap,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]))) invalidates 1 classes due to The viw.Viw has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(commandMap,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.Viw)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.MoveWordCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.MoveWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.EndWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.BackWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.NextWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.BackWordCommand, viw.NextWordCommand, viw.MoveWordCommand, viw.EndWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.MoveWordCommand,ModifiedNames(changes = UsedName(viw;MoveWordCommand;init;,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(MoveWordCommand,[Default]))) invalidates 4 classes due to The viw.MoveWordCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(viw;MoveWordCommand;init;,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(MoveWordCommand,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.BackWordCommand, viw.NextWordCommand, viw.MoveWordCommand, viw.EndWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.MoveRightCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.MoveRightCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.MoveRightCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.MoveRightCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(MoveRightCommand,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;MoveRightCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.MoveRightCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(MoveRightCommand,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;MoveRightCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.MoveRightCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.internals.State...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.internals.State)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.internals.State)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.SubstituteCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.Command. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.JoinLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.ChangeLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.BackWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.GoCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.DeleteLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveLeftCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveUpCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.StartLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.OpenCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.EndLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertAfterLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.EndWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MatchBracketCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.internals.Runner. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveRightCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.DeleteCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.DeleteBackCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.AppendCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.InsertInLineCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.NextWordCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.MoveDownCommand. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of viw.Viw. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.internals.State,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(properSplit,[Default]))) invalidates 1 classes due to The viw.internals.State has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(hashCode,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(properSplit,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.internals.State)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.InsertAfterLineCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.InsertAfterLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.InsertAfterLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.InsertAfterLineCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(viw;InsertAfterLineCommand;init;,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(InsertAfterLineCommand,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.InsertAfterLineCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(viw;InsertAfterLineCommand;init;,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(InsertAfterLineCommand,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.InsertAfterLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.StartLineCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.StartLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.StartLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.StartLineCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(StartLineCommand,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;StartLineCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.StartLineCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(StartLineCommand,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;StartLineCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.StartLineCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.AppendCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.AppendCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.AppendCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.AppendCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(viw;AppendCommand;init;,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(AppendCommand,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.AppendCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(viw;AppendCommand;init;,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(AppendCommand,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.AppendCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.BackWordCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.BackWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.BackWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.BackWordCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(BackWordCommand,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;BackWordCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.BackWordCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(words,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(BackWordCommand,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;BackWordCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.BackWordCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.MoveCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.MoveCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveLeftCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveWordCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.EndWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.BackWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.NextWordCommand by viw.MoveWordCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveUpCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.StartLineCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.EndLineCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MatchBracketCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveRightCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding viw.MoveDownCommand by viw.MoveCommand[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.BackWordCommand, viw.MoveLeftCommand, viw.MoveWordCommand, viw.MoveUpCommand, viw.StartLineCommand, viw.EndLineCommand, viw.EndWordCommand, viw.MatchBracketCommand, viw.MoveCommand, viw.MoveRightCommand, viw.NextWordCommand, viw.MoveDownCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.MoveCommand,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MoveCommand,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(viw;MoveCommand;init;,[Default]))) invalidates 12 classes due to The viw.MoveCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MoveCommand,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(viw;MoveCommand;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.BackWordCommand, viw.MoveLeftCommand, viw.MoveWordCommand, viw.MoveUpCommand, viw.StartLineCommand, viw.EndLineCommand, viw.EndWordCommand, viw.MatchBracketCommand, viw.MoveCommand, viw.MoveRightCommand, viw.NextWordCommand, viw.MoveDownCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from viw.MatchBracketCommand...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(viw.MatchBracketCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(viw.MatchBracketCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(viw.MatchBracketCommand,ModifiedNames(changes = UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(MatchBracketCommand,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;MatchBracketCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The viw.MatchBracketCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(state,[Default]), UsedName(canEqual,[Default]), UsedName(getClass,[Default]), UsedName(line,[Default]), UsedName(contentLines,[Default]), UsedName(MatchBracketCommand,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(productArity,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(lineLength,[Default]), UsedName(hashCode,[Default]), UsedName($asInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(##,[Default]), UsedName(eval,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(productIterator,[Default]), UsedName(!=,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(viw;MatchBracketCommand;init;,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(lines,[Default]), UsedName(position,[Default]), UsedName(char,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(viw.MatchBracketCommand)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
